{"ast":null,"code":"var _jsxFileName = \"/workspaces/Myddaaapp/dex-react/src/components/Liquidity.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { factoryABI } from '../contracts/factoryABI';\nimport { lpTokenABI } from '../contracts/lpTokenABI';\nimport { erc20ABI } from '../contracts/erc20ABI';\nimport { routerABI } from '../contracts/routerABI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FACTORY_ADDRESS = \"0xc98d287eFCBbb177D641FD2105dEC57996335766\";\nconst ROUTER_ADDRESS = \"0x144e18DB06B4553b94ED397610D2FBf809790545\";\nconst WMON_ADDRESS = \"0xf6C4e67A551bd10444e3b439A4Eb19ec46eC1215\";\nfunction MyLiquidity({\n  wallet,\n  notify,\n  tokenList\n}) {\n  _s();\n  const [lpPositions, setLpPositions] = useState([]);\n  const [selectedLP, setSelectedLP] = useState(null);\n  const [removePercentage, setRemovePercentage] = useState(0);\n  const {\n    provider,\n    signer,\n    userAddress\n  } = wallet;\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchLPPositions();\n    }, 15000);\n    fetchLPPositions();\n    return () => clearInterval(interval);\n  }, [userAddress]);\n  const fetchLPPositions = async () => {\n    if (!userAddress) return;\n    const factoryContract = new ethers.Contract(FACTORY_ADDRESS, factoryABI, provider);\n    const allPairsLength = await factoryContract.allPairsLength();\n    let positions = [];\n    for (let i = 0; i < allPairsLength; i++) {\n      try {\n        const pairAddress = await factoryContract.allPairs(i);\n        if (pairAddress === ethers.constants.AddressZero) continue;\n        const pairContract = new ethers.Contract(pairAddress, lpTokenABI, provider);\n        const balance = await pairContract.balanceOf(userAddress);\n        if (balance.gt(0)) {\n          const token0 = await pairContract.token0();\n          const token1 = await pairContract.token1();\n          const token0Contract = new ethers.Contract(token0, erc20ABI, provider);\n          const token1Contract = new ethers.Contract(token1, erc20ABI, provider);\n          const symbol0 = await token0Contract.symbol();\n          const symbol1 = await token1Contract.symbol();\n          const balanceFormatted = ethers.utils.formatUnits(balance, 18);\n          positions.push({\n            address: pairAddress,\n            tokenA: token0,\n            tokenB: token1,\n            symbol: `${symbol0}-${symbol1} LP`,\n            balance: balance.toString(),\n            balanceFormatted\n          });\n        }\n      } catch (error) {\n        console.error(`Error fetching pair ${i}:`, error);\n      }\n    }\n    setLpPositions(positions);\n  };\n  const handleLPSelect = lp => {\n    setSelectedLP(lp);\n  };\n  const ensureApproval = async (token, amount, spender) => {\n    if (token.address === \"MON\") return true;\n    const tokenContract = new ethers.Contract(token.address, erc20ABI, signer);\n    const allowance = await tokenContract.allowance(userAddress, spender);\n    if (allowance.lt(amount)) {\n      notify(`Approving ${token.symbol || 'LP'}...`, \"info\");\n      const tx = await tokenContract.approve(spender, amount);\n      await tx.wait();\n      notify(`${token.symbol || 'LP'} approved successfully`, \"success\");\n    }\n    return true;\n  };\n  const handleRemoveLiquidity = async () => {\n    if (!selectedLP) return notify(\"Select an LP token\", \"error\");\n    const lpBalance = ethers.BigNumber.from(selectedLP.balance);\n    const amountToRemove = lpBalance.mul(ethers.BigNumber.from(Math.floor(removePercentage * 1e6))).div(ethers.BigNumber.from(1e6));\n    try {\n      await ensureApproval({\n        address: selectedLP.address,\n        decimals: 18\n      }, amountToRemove, ROUTER_ADDRESS);\n      const routerContract = new ethers.Contract(ROUTER_ADDRESS, routerABI, signer);\n      const deadline = Math.floor(Date.now() / 1000) + 600;\n      const pairContract = new ethers.Contract(selectedLP.address, lpTokenABI, provider);\n      const [reserve0, reserve1] = await pairContract.getReserves();\n      const totalSupply = await pairContract.totalSupply();\n      const token0 = await pairContract.token0();\n      const token1 = await pairContract.token1();\n      const reserveA = selectedLP.tokenA.toLowerCase() === token0.toLowerCase() ? reserve0 : reserve1;\n      const reserveB = selectedLP.tokenA.toLowerCase() === token0.toLowerCase() ? reserve1 : reserve0;\n      const expectedAmountA = totalSupply.gt(0) ? amountToRemove.mul(reserveA).div(totalSupply) : ethers.BigNumber.from(0);\n      const expectedAmountB = totalSupply.gt(0) ? amountToRemove.mul(reserveB).div(totalSupply) : ethers.BigNumber.from(0);\n      const amountAMin = expectedAmountA.mul(95).div(100);\n      const amountBMin = expectedAmountB.mul(95).div(100);\n      let tx;\n      if (selectedLP.tokenA.toLowerCase() === WMON_ADDRESS.toLowerCase()) {\n        tx = await routerContract.removeLiquidityETH(selectedLP.tokenB, amountToRemove, amountBMin, amountAMin, deadline, {\n          gasLimit: 300000\n        });\n      } else if (selectedLP.tokenB.toLowerCase() === WMON_ADDRESS.toLowerCase()) {\n        tx = await routerContract.removeLiquidityETH(selectedLP.tokenA, amountToRemove, amountAMin, amountBMin, deadline, {\n          gasLimit: 300000\n        });\n      } else {\n        tx = await routerContract.removeLiquidity(selectedLP.tokenA, selectedLP.tokenB, amountToRemove, amountAMin, amountBMin, {\n          gasLimit: 300000\n        });\n      }\n      notify(\"Removing liquidity...\", \"info\");\n      await tx.wait();\n      notify(\"Liquidity removed successfully\", \"success\");\n      fetchLPPositions();\n    } catch (error) {\n      console.error(\"LP removal error:\", error);\n      notify(\"Liquidity removal failed: \" + (error.reason || error.message), \"error\");\n    }\n  };\n  const handleImportLP = async () => {\n    const lpAddress = prompt(\"Enter LP token address:\");\n    if (!lpAddress || !ethers.utils.isAddress(lpAddress)) {\n      notify(\"Invalid LP address\", \"error\");\n      return;\n    }\n    try {\n      const lpContract = new ethers.Contract(lpAddress, lpTokenABI, provider);\n      const balance = await lpContract.balanceOf(userAddress);\n      if (balance.lte(0)) {\n        notify(\"No balance found for this LP token\", \"error\");\n        return;\n      }\n      const token0 = await lpContract.token0();\n      const token1 = await lpContract.token1();\n      const token0Contract = new ethers.Contract(token0, erc20ABI, provider);\n      const token1Contract = new ethers.Contract(token1, erc20ABI, provider);\n      const symbol0 = await token0Contract.symbol();\n      const symbol1 = await token1Contract.symbol();\n      const balanceFormatted = ethers.utils.formatUnits(balance, 18);\n      setLpPositions(prev => [...prev, {\n        address: lpAddress,\n        tokenA: token0,\n        tokenB: token1,\n        symbol: `${symbol0}-${symbol1} LP`,\n        balance: balance.toString(),\n        balanceFormatted\n      }]);\n      notify(\"LP token imported successfully\", \"success\");\n    } catch (error) {\n      console.error(\"Error importing LP:\", error);\n      notify(\"Failed to import LP: \" + (error.reason || error.message), \"error\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"myLiquidityTab\",\n    className: \"tabContent\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Liquidity Positions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"myLiquidityList\",\n      className: \"scrollable\",\n      children: lpPositions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No liquidity positions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this) : lpPositions.map(lp => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `lpTokenItem ${(selectedLP === null || selectedLP === void 0 ? void 0 : selectedLP.address) === lp.address ? 'selected' : ''}`,\n        onClick: () => handleLPSelect(lp),\n        children: [lp.symbol, \": \", lp.balanceFormatted]\n      }, lp.address, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"actionButton\",\n      onClick: handleImportLP,\n      children: \"Import LP Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), selectedLP && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"lpRemovalSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"removeSlider\",\n        children: [\"Remove %: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [removePercentage, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        id: \"removeSlider\",\n        min: \"0\",\n        max: \"99.9999\",\n        step: \"0.0001\",\n        value: removePercentage,\n        onChange: e => setRemovePercentage(parseFloat(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"actionButton\",\n        onClick: handleRemoveLiquidity,\n        children: \"Remove Liquidity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(MyLiquidity, \"LtQtguWKcsD5ZfHNkDEZ2vDpcr4=\");\n_c = MyLiquidity;\nexport default MyLiquidity;\nvar _c;\n$RefreshReg$(_c, \"MyLiquidity\");","map":{"version":3,"names":["React","useState","useEffect","ethers","factoryABI","lpTokenABI","erc20ABI","routerABI","jsxDEV","_jsxDEV","FACTORY_ADDRESS","ROUTER_ADDRESS","WMON_ADDRESS","MyLiquidity","wallet","notify","tokenList","_s","lpPositions","setLpPositions","selectedLP","setSelectedLP","removePercentage","setRemovePercentage","provider","signer","userAddress","interval","setInterval","fetchLPPositions","clearInterval","factoryContract","Contract","allPairsLength","positions","i","pairAddress","allPairs","constants","AddressZero","pairContract","balance","balanceOf","gt","token0","token1","token0Contract","token1Contract","symbol0","symbol","symbol1","balanceFormatted","utils","formatUnits","push","address","tokenA","tokenB","toString","error","console","handleLPSelect","lp","ensureApproval","token","amount","spender","tokenContract","allowance","lt","tx","approve","wait","handleRemoveLiquidity","lpBalance","BigNumber","from","amountToRemove","mul","Math","floor","div","decimals","routerContract","deadline","Date","now","reserve0","reserve1","getReserves","totalSupply","reserveA","toLowerCase","reserveB","expectedAmountA","expectedAmountB","amountAMin","amountBMin","removeLiquidityETH","gasLimit","removeLiquidity","reason","message","handleImportLP","lpAddress","prompt","isAddress","lpContract","lte","prev","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","onClick","htmlFor","type","min","max","step","value","onChange","e","parseFloat","target","_c","$RefreshReg$"],"sources":["/workspaces/Myddaaapp/dex-react/src/components/Liquidity.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { factoryABI } from '../contracts/factoryABI';\nimport { lpTokenABI } from '../contracts/lpTokenABI';\nimport { erc20ABI } from '../contracts/erc20ABI';\nimport { routerABI } from '../contracts/routerABI';\n\nconst FACTORY_ADDRESS = \"0xc98d287eFCBbb177D641FD2105dEC57996335766\";\nconst ROUTER_ADDRESS = \"0x144e18DB06B4553b94ED397610D2FBf809790545\";\nconst WMON_ADDRESS = \"0xf6C4e67A551bd10444e3b439A4Eb19ec46eC1215\";\n\nfunction MyLiquidity({ wallet, notify, tokenList }) {\n  const [lpPositions, setLpPositions] = useState([]);\n  const [selectedLP, setSelectedLP] = useState(null);\n  const [removePercentage, setRemovePercentage] = useState(0);\n  const { provider, signer, userAddress } = wallet;\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchLPPositions();\n    }, 15000);\n    fetchLPPositions();\n    return () => clearInterval(interval);\n  }, [userAddress]);\n\n  const fetchLPPositions = async () => {\n    if (!userAddress) return;\n    const factoryContract = new ethers.Contract(FACTORY_ADDRESS, factoryABI, provider);\n    const allPairsLength = await factoryContract.allPairsLength();\n    let positions = [];\n    for (let i = 0; i < allPairsLength; i++) {\n      try {\n        const pairAddress = await factoryContract.allPairs(i);\n        if (pairAddress === ethers.constants.AddressZero) continue;\n        const pairContract = new ethers.Contract(pairAddress, lpTokenABI, provider);\n        const balance = await pairContract.balanceOf(userAddress);\n        if (balance.gt(0)) {\n          const token0 = await pairContract.token0();\n          const token1 = await pairContract.token1();\n          const token0Contract = new ethers.Contract(token0, erc20ABI, provider);\n          const token1Contract = new ethers.Contract(token1, erc20ABI, provider);\n          const symbol0 = await token0Contract.symbol();\n          const symbol1 = await token1Contract.symbol();\n          const balanceFormatted = ethers.utils.formatUnits(balance, 18);\n          positions.push({\n            address: pairAddress,\n            tokenA: token0,\n            tokenB: token1,\n            symbol: `${symbol0}-${symbol1} LP`,\n            balance: balance.toString(),\n            balanceFormatted\n          });\n        }\n      } catch (error) {\n        console.error(`Error fetching pair ${i}:`, error);\n      }\n    }\n    setLpPositions(positions);\n  };\n\n  const handleLPSelect = (lp) => {\n    setSelectedLP(lp);\n  };\n\n  const ensureApproval = async (token, amount, spender) => {\n    if (token.address === \"MON\") return true;\n    const tokenContract = new ethers.Contract(token.address, erc20ABI, signer);\n    const allowance = await tokenContract.allowance(userAddress, spender);\n    if (allowance.lt(amount)) {\n      notify(`Approving ${token.symbol || 'LP'}...`, \"info\");\n      const tx = await tokenContract.approve(spender, amount);\n      await tx.wait();\n      notify(`${token.symbol || 'LP'} approved successfully`, \"success\");\n    }\n    return true;\n  };\n\n  const handleRemoveLiquidity = async () => {\n    if (!selectedLP) return notify(\"Select an LP token\", \"error\");\n    const lpBalance = ethers.BigNumber.from(selectedLP.balance);\n    const amountToRemove = lpBalance.mul(ethers.BigNumber.from(Math.floor(removePercentage * 1e6))).div(ethers.BigNumber.from(1e6));\n    try {\n      await ensureApproval({ address: selectedLP.address, decimals: 18 }, amountToRemove, ROUTER_ADDRESS);\n      const routerContract = new ethers.Contract(ROUTER_ADDRESS, routerABI, signer);\n      const deadline = Math.floor(Date.now() / 1000) + 600;\n      const pairContract = new ethers.Contract(selectedLP.address, lpTokenABI, provider);\n      const [reserve0, reserve1] = await pairContract.getReserves();\n      const totalSupply = await pairContract.totalSupply();\n      const token0 = await pairContract.token0();\n      const token1 = await pairContract.token1();\n      const reserveA = selectedLP.tokenA.toLowerCase() === token0.toLowerCase() ? reserve0 : reserve1;\n      const reserveB = selectedLP.tokenA.toLowerCase() === token0.toLowerCase() ? reserve1 : reserve0;\n      const expectedAmountA = totalSupply.gt(0) ? amountToRemove.mul(reserveA).div(totalSupply) : ethers.BigNumber.from(0);\n      const expectedAmountB = totalSupply.gt(0) ? amountToRemove.mul(reserveB).div(totalSupply) : ethers.BigNumber.from(0);\n      const amountAMin = expectedAmountA.mul(95).div(100);\n      const amountBMin = expectedAmountB.mul(95).div(100);\n      let tx;\n      if (selectedLP.tokenA.toLowerCase() === WMON_ADDRESS.toLowerCase()) {\n        tx = await routerContract.removeLiquidityETH(\n          selectedLP.tokenB,\n          amountToRemove,\n          amountBMin,\n          amountAMin,\n          deadline,\n          { gasLimit: 300000 }\n        );\n      } else if (selectedLP.tokenB.toLowerCase() === WMON_ADDRESS.toLowerCase()) {\n        tx = await routerContract.removeLiquidityETH(\n          selectedLP.tokenA,\n          amountToRemove,\n          amountAMin,\n          amountBMin,\n          deadline,\n          { gasLimit: 300000 }\n        );\n      } else {\n        tx = await routerContract.removeLiquidity(\n          selectedLP.tokenA,\n          selectedLP.tokenB,\n          amountToRemove,\n          amountAMin,\n          amountBMin,\n          { gasLimit: 300000 }\n        );\n      }\n      notify(\"Removing liquidity...\", \"info\");\n      await tx.wait();\n      notify(\"Liquidity removed successfully\", \"success\");\n      fetchLPPositions();\n    } catch (error) {\n      console.error(\"LP removal error:\", error);\n      notify(\"Liquidity removal failed: \" + (error.reason || error.message), \"error\");\n    }\n  };\n\n  const handleImportLP = async () => {\n    const lpAddress = prompt(\"Enter LP token address:\");\n    if (!lpAddress || !ethers.utils.isAddress(lpAddress)) {\n      notify(\"Invalid LP address\", \"error\");\n      return;\n    }\n    try {\n      const lpContract = new ethers.Contract(lpAddress, lpTokenABI, provider);\n      const balance = await lpContract.balanceOf(userAddress);\n      if (balance.lte(0)) {\n        notify(\"No balance found for this LP token\", \"error\");\n        return;\n      }\n      const token0 = await lpContract.token0();\n      const token1 = await lpContract.token1();\n      const token0Contract = new ethers.Contract(token0, erc20ABI, provider);\n      const token1Contract = new ethers.Contract(token1, erc20ABI, provider);\n      const symbol0 = await token0Contract.symbol();\n      const symbol1 = await token1Contract.symbol();\n      const balanceFormatted = ethers.utils.formatUnits(balance, 18);\n      setLpPositions(prev => [...prev, {\n        address: lpAddress,\n        tokenA: token0,\n        tokenB: token1,\n        symbol: `${symbol0}-${symbol1} LP`,\n        balance: balance.toString(),\n        balanceFormatted\n      }]);\n      notify(\"LP token imported successfully\", \"success\");\n    } catch (error) {\n      console.error(\"Error importing LP:\", error);\n      notify(\"Failed to import LP: \" + (error.reason || error.message), \"error\");\n    }\n  };\n\n  return (\n    <section id=\"myLiquidityTab\" className=\"tabContent\">\n      <h2>My Liquidity Positions</h2>\n      <div id=\"myLiquidityList\" className=\"scrollable\">\n        {lpPositions.length === 0 ? (\n          <p>No liquidity positions found.</p>\n        ) : (\n          lpPositions.map(lp => (\n            <div\n              key={lp.address}\n              className={`lpTokenItem ${selectedLP?.address === lp.address ? 'selected' : ''}`}\n              onClick={() => handleLPSelect(lp)}\n            >\n              {lp.symbol}: {lp.balanceFormatted}\n            </div>\n          ))\n        )}\n      </div>\n      <button className=\"actionButton\" onClick={handleImportLP}>Import LP Token</button>\n      {selectedLP && (\n        <div id=\"lpRemovalSection\">\n          <label htmlFor=\"removeSlider\">Remove %: <span>{removePercentage}%</span></label>\n          <input\n            type=\"range\"\n            id=\"removeSlider\"\n            min=\"0\"\n            max=\"99.9999\"\n            step=\"0.0001\"\n            value={removePercentage}\n            onChange={(e) => setRemovePercentage(parseFloat(e.target.value))}\n          />\n          <button className=\"actionButton\" onClick={handleRemoveLiquidity}>Remove Liquidity</button>\n        </div>\n      )}\n    </section>\n  );\n}\n\nexport default MyLiquidity;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}