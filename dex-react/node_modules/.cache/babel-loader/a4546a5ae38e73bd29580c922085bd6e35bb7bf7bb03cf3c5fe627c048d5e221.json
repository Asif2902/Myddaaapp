{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nconst PRIMARY_RPC = \"https://testnet-rpc.monad.xyz\";\nconst CHAIN_ID = 10143;\nconst CHAIN_HEX = \"0x279f\";\nexport function useWallet() {\n  _s();\n  const [provider] = useState(new ethers.providers.StaticJsonRpcProvider(PRIMARY_RPC, {\n    chainId: CHAIN_ID,\n    name: \"monad\"\n  }));\n  const [signer, setSigner] = useState(null);\n  const [userAddress, setUserAddress] = useState(null);\n  const [currentChainId, setCurrentChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        const newSigner = web3Provider.getSigner();\n        const address = await newSigner.getAddress();\n        const chainId = (await web3Provider.getNetwork()).chainId;\n        setSigner(newSigner);\n        setUserAddress(address);\n        setCurrentChainId(chainId);\n        setIsConnected(true);\n        if (chainId !== CHAIN_ID) {\n          await switchToCorrectChain();\n        }\n        return true;\n      } catch (error) {\n        console.error(\"Wallet connection failed:\", error);\n        return false;\n      }\n    } else {\n      console.error(\"No wallet provider found\");\n      return false;\n    }\n  };\n  const switchToCorrectChain = async () => {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: CHAIN_HEX\n        }]\n      });\n      setCurrentChainId(CHAIN_ID);\n    } catch (switchError) {\n      console.error(\"Chain switch failed:\", switchError);\n    }\n  };\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on('chainChanged', chainId => {\n        setCurrentChainId(parseInt(chainId, 16));\n      });\n      window.ethereum.on('accountsChanged', accounts => {\n        if (accounts.length > 0) {\n          setUserAddress(accounts[0]);\n        } else {\n          setIsConnected(false);\n          setUserAddress(null);\n          setSigner(null);\n        }\n      });\n    }\n  }, []);\n  return {\n    provider,\n    signer,\n    userAddress,\n    currentChainId,\n    isConnected,\n    connectWallet,\n    switchToCorrectChain\n  };\n}\n_s(useWallet, \"hk9uNmX1beHmoDvpQ7BUZ5Lat6w=\");","map":{"version":3,"names":["useState","useEffect","ethers","PRIMARY_RPC","CHAIN_ID","CHAIN_HEX","useWallet","_s","provider","providers","StaticJsonRpcProvider","chainId","name","signer","setSigner","userAddress","setUserAddress","currentChainId","setCurrentChainId","isConnected","setIsConnected","connectWallet","window","ethereum","request","method","web3Provider","Web3Provider","newSigner","getSigner","address","getAddress","getNetwork","switchToCorrectChain","error","console","params","switchError","on","parseInt","accounts","length"],"sources":["/workspaces/Myddaaapp/dex-react/src/utils/wallet.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nconst PRIMARY_RPC = \"https://testnet-rpc.monad.xyz\";\nconst CHAIN_ID = 10143;\nconst CHAIN_HEX = \"0x279f\";\n\nexport function useWallet() {\n  const [provider] = useState(new ethers.providers.StaticJsonRpcProvider(PRIMARY_RPC, { chainId: CHAIN_ID, name: \"monad\" }));\n  const [signer, setSigner] = useState(null);\n  const [userAddress, setUserAddress] = useState(null);\n  const [currentChainId, setCurrentChainId] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\n        const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n        const newSigner = web3Provider.getSigner();\n        const address = await newSigner.getAddress();\n        const chainId = (await web3Provider.getNetwork()).chainId;\n        setSigner(newSigner);\n        setUserAddress(address);\n        setCurrentChainId(chainId);\n        setIsConnected(true);\n        if (chainId !== CHAIN_ID) {\n          await switchToCorrectChain();\n        }\n        return true;\n      } catch (error) {\n        console.error(\"Wallet connection failed:\", error);\n        return false;\n      }\n    } else {\n      console.error(\"No wallet provider found\");\n      return false;\n    }\n  };\n\n  const switchToCorrectChain = async () => {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: CHAIN_HEX }]\n      });\n      setCurrentChainId(CHAIN_ID);\n    } catch (switchError) {\n      console.error(\"Chain switch failed:\", switchError);\n    }\n  };\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on('chainChanged', (chainId) => {\n        setCurrentChainId(parseInt(chainId, 16));\n      });\n      window.ethereum.on('accountsChanged', (accounts) => {\n        if (accounts.length > 0) {\n          setUserAddress(accounts[0]);\n        } else {\n          setIsConnected(false);\n          setUserAddress(null);\n          setSigner(null);\n        }\n      });\n    }\n  }, []);\n\n  return {\n    provider,\n    signer,\n    userAddress,\n    currentChainId,\n    isConnected,\n    connectWallet,\n    switchToCorrectChain\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}